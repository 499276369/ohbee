package ob.android;

import java.io.IOException;

import android.app.Activity;
import android.media.MediaRecorder;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.LinearLayout;

import static ob.android.Constants.*;

public class MainActivity
extends Activity
{	
	boolean isRecording = false;
		
	@Override
	public void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		Log.d(TAG, "onCreate");
	}
	
	@Override
	protected void onDestroy()
	{
		super.onDestroy();
		Log.d(TAG, "onDestroy");
	}

	@Override
	protected void onPause()
	{
		super.onPause();
		Log.d(TAG, "onPause");
	}

	@Override
	protected void onRestart()
	{
		super.onRestart();
		Log.d(TAG, "onRestart");
	}

	@Override
	protected void onResume()
	{
		super.onResume();
		Log.d(TAG, "onResume");
	}

	@Override
	protected void onStart()
	{
		super.onStart();
		Log.d(TAG, "onStart");
				
		VideoSocketFile vsf = new VideoSocketFile();
		SocketPair socketPair;
		try
		{
			debug("Opening sockets");
			socketPair = vsf.open();
		}
		catch (IOException e)
		{
			error("Unable to open the sockets", e);
			socketPair = null;
		}
		final SocketPair lSocketPair = socketPair;
		
		final Preview mPreview = new Preview(this);
		final MediaRecorder recorder = new MediaRecorder();
		recorder.setPreviewDisplay(mPreview.getHolder().getSurface());

		final Button button = new Button(this);
		button.setText("Start");
		button.setWidth(100);
		button.setHeight(50);
		button.setHapticFeedbackEnabled(true);
		button.setOnClickListener(new View.OnClickListener()
		{
			public void onClick(View v)
			{
				if(isRecording)
					stopRecording(button, recorder);
				else
					startRecording(button, recorder, lSocketPair, mPreview);
			}
		});
		
		FrameLayout layout = new FrameLayout(this);
		LinearLayout layout2 = new LinearLayout(this);
		
		layout.addView(mPreview);
		layout.addView(layout2);
		layout2.addView(button);
		setContentView(layout);
	}

	@Override
	protected void onStop()
	{
		super.onStop();
		Log.d(TAG, "onStop");
	}
	
	private void startRecording(Button button, MediaRecorder recorder, final SocketPair socketPair, Preview preview)
	{
		new Thread(new Runnable()
		{	
			public void run()
			{
				readStream(socketPair.getNativeSocket());
			}
		}).start();
		
		try { Thread.sleep(1000); }
		catch(InterruptedException e) {}
		
		try
		{
			//recorder.setAudioSource(MediaRecorder.AudioSource.MIC);
			recorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);
			recorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4);
			//recorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);
			recorder.setVideoEncoder(MediaRecorder.VideoEncoder.MPEG_4_SP);
			//recorder.setVideoSize(320, 240);
			recorder.setVideoSize(160, 112);
			recorder.setVideoFrameRate(15);
			recorder.setOutputFile(socketPair.getLocalSocket());
			preview.mCamera.stopPreview();
			preview.mCamera.release();
			recorder.prepare();
			recorder.start();
			button.setText("Stop");
			isRecording = true;
		}
		catch(Exception e)
		{
			error("Unable to start recording", e);
		}
	}
	
	private void stopRecording(Button button, MediaRecorder recorder)
	{
		recorder.stop();
		recorder.release();
		button.setText("Start");
		isRecording = false;
	}
	
	private native void readStream(long nativeSocket);
}
