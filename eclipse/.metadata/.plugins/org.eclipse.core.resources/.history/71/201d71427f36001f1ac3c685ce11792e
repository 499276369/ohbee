/*
 * Libavformat API example: Output a media file in any supported
 * libavformat format. The default codecs are used.
 *
 * Copyright (c) 2003 Fabrice Bellard
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include <libavcodec/avcodec.h>
#include <libavformat/avformat.h>
#include <libavcodec/opt.h>

inline static void setOption(const char *opt, const char *arg,
		AVCodecContext *context) {
	const AVOption *option = NULL;
	av_set_string3(context, opt, arg, 1, &option);
}

/************************************************************
 * Begin Original Source
 ************************************************************/

#define STREAM_DURATION   30.0 /* 30 seconds stream duration */
#define STREAM_FRAME_RATE 25 /* 25 images/s */
#define STREAM_NB_FRAMES  ((int)(STREAM_DURATION * STREAM_FRAME_RATE))

/************************************************************
 * Begin Audio
 ************************************************************/

float t, tincr, tincr2;
int16_t *samples;
uint8_t *audio_outbuf;
int audio_outbuf_size;
int audio_input_frame_size;

/*
 * add an audio output stream
 */
static AVStream *add_audio_stream(AVFormatContext *oc, enum CodecID codec_id) {
	AVCodecContext *c;
	AVStream *st;

	st = av_new_stream(oc, 1);
	if (!st) {
		fprintf(stderr, "Could not alloc stream\n");
		exit(1);
	}

	c = st->codec;
	c->codec_id = codec_id;
	c->codec_type = CODEC_TYPE_AUDIO;

	/* put sample parameters */
	c->bit_rate = 64000;
	c->sample_rate = 44100;
	c->channels = 2;

	// some formats want stream headers to be separate
	if (oc->oformat->flags & AVFMT_GLOBALHEADER)
		c->flags |= CODEC_FLAG_GLOBAL_HEADER;

	return st;
}

static void open_audio(AVFormatContext *oc, AVStream *st) {
	AVCodecContext *c;
	AVCodec *codec;

	c = st->codec;

	/* find the audio encoder */
	codec = avcodec_find_encoder(c->codec_id);
	if (!codec) {
		fprintf(stderr, "codec not found\n");
		exit(1);
	}

	/* open it */
	if (avcodec_open(c, codec) < 0) {
		fprintf(stderr, "could not open codec\n");
		exit(1);
	}

	/* init signal generator */
	t = 0;
	tincr = 2 * M_PI * 110.0 / c->sample_rate;
	/* increment frequency by 110 Hz per second */
	tincr2 = 2 * M_PI * 110.0 / c->sample_rate / c->sample_rate;

	audio_outbuf_size = 10000;
	audio_outbuf = av_malloc(audio_outbuf_size);

	/* ugly hack for PCM codecs (will be removed ASAP with new PCM
	 support to compute the input frame size in samples */
	if (c->frame_size <= 1) {
		audio_input_frame_size = audio_outbuf_size / c->channels;
		switch (st->codec->codec_id) {
		case CODEC_ID_PCM_S16LE:
		case CODEC_ID_PCM_S16BE:
		case CODEC_ID_PCM_U16LE:
		case CODEC_ID_PCM_U16BE:
			audio_input_frame_size >>= 1;
			break;
		default:
			break;
		}
	} else {
		audio_input_frame_size = c->frame_size;
	}
	samples = av_malloc(audio_input_frame_size * 2 * c->channels);
}

/* prepare a 16 bit dummy audio frame of 'frame_size' samples and
 'nb_channels' channels */
static void get_audio_frame(int16_t *samples, int frame_size, int nb_channels) {
	int j, i, v;
	int16_t *q;

	q = samples;
	for (j = 0; j < frame_size; j++) {
		v = (int) (sin(t) * 10000);
		for (i = 0; i < nb_channels; i++)
			*q++ = v;
		t += tincr;
		tincr += tincr2;
	}
}

static void write_audio_frame(AVFormatContext *oc, AVStream *st) {
	AVCodecContext *c;
	AVPacket pkt;
	av_init_packet(&pkt);

	c = st->codec;

	get_audio_frame(samples, audio_input_frame_size, c->channels);

	pkt.size
			= avcodec_encode_audio(c, audio_outbuf, audio_outbuf_size, samples);

	if (c->coded_frame && c->coded_frame->pts != AV_NOPTS_VALUE)
		pkt.pts
				= av_rescale_q(c->coded_frame->pts, c->time_base, st->time_base);
	pkt.flags |= PKT_FLAG_KEY;
	pkt.stream_index = st->index;
	pkt.data = audio_outbuf;

	/* write the compressed frame in the media file */
	if (av_interleaved_write_frame(oc, &pkt) != 0) {
		fprintf(stderr, "Error while writing audio frame\n");
		exit(1);
	}
}

static void closeAudioOutput(AVFormatContext* outputContext, AVStream* stream)
{
	avcodec_close(stream->codec);
	av_free(samples);
	av_free(audio_outbuf);
}

/************************************************************
 * Begin Video
 ************************************************************/

AVFrame *picture, *tmp_picture;
uint8_t *video_outbuf;
int frame_count, video_outbuf_size;

static AVStream* addVideoOutStream(AVFormatContext* outputContext, AVCodecContext* oldCodecContext, enum CodecID codecID)
{
	AVStream* stream = av_new_stream(outputContext, 0);
	if (!stream)
	{
		fprintf(stderr, "Could not alloc stream\n");
		exit(1);
	}

	AVCodecContext* codecContext = stream->codec;
	codecContext->codec_id = codecID;
	codecContext->codec_type = CODEC_TYPE_VIDEO;
	codecContext->bit_rate = 50000;
	codecContext->width = oldCodecContext->width;
	codecContext->height = oldCodecContext->height;
	/* time base: this is the fundamental unit of time (in seconds) in terms
	 of which frame timestamps are represented. for fixed-fps content,
	 timebase should be 1/framerate and timestamp increments should be
	 identically 1. */

	codecContext->time_base.den = oldCodecContext->time_base.den;
	codecContext->time_base.num = oldCodecContext->time_base.num;
	stream->time_base.den = oldCodecContext->time_base.den;
	stream->time_base.num = oldCodecContext->time_base.num;
	codecContext->gop_size = oldCodecContext->gop_size; /* emit one intra frame every twelve frames at most */
	codecContext->pix_fmt = oldCodecContext->pix_fmt;
	// some formats want stream headers to be separate
	if (outputContext->oformat->flags & AVFMT_GLOBALHEADER)
		codecContext->flags |= CODEC_FLAG_GLOBAL_HEADER;

	/* Set the video encoding options. */
	setOption("coder", "0", codecContext);
	setOption("flags", "-loop", codecContext);
	setOption("cmp", "+chroma", codecContext);
	setOption("partitions", "-parti8x8-parti4x4-partp8x8-partb8x8", codecContext);
	setOption("me_method", "dia", codecContext);
	setOption("subq", "0", codecContext);
	setOption("me_range", "16", codecContext);
	setOption("g", "250", codecContext);
	setOption("keyint_min", "25", codecContext);
	setOption("sc_threshold", "0", codecContext);
	setOption("i_qfactor", "0.71", codecContext);
	setOption("b_strategy", "0", codecContext);
	setOption("qcomp", "0.6", codecContext);
	setOption("qmin", "10", codecContext);
	setOption("qmax", "51", codecContext);
	setOption("qdiff", "4", codecContext);
	setOption("bf", "0", codecContext);
	setOption("refs", "1", codecContext);
	setOption("directpred", "1", codecContext);
	setOption("trellis", "0", codecContext);
	setOption("flags2", "-bpyramid-mixed_refs-wpred-dct8x8+fastpskip-mbtree", codecContext);
	setOption("wpredp", "0", codecContext);

	return stream;
}

static AVFrame *alloc_picture(enum PixelFormat pix_fmt, int width, int height) {
	AVFrame *picture;
	uint8_t *picture_buf;
	int size;

	picture = avcodec_alloc_frame();
	if (!picture)
		return NULL;
	size = avpicture_get_size(pix_fmt, width, height);
	picture_buf = av_malloc(size);
	if (!picture_buf) {
		av_free(picture);
		return NULL;
	}
	avpicture_fill((AVPicture *) picture, picture_buf, pix_fmt, width, height);
	return picture;
}

static void open_video(AVFormatContext* oc, AVStream* st) {
	AVCodecContext* c = st->codec;

	AVCodec *codec = avcodec_find_encoder(c->codec_id);
	avcodec_open(c, codec);

	video_outbuf = NULL;
	if (!(oc->oformat->flags & AVFMT_RAWPICTURE)) {
		/* allocate output buffer */
		/* XXX: API change will be done */
		/* buffers passed into lav* can be     	c->width = 176;
    	c->height = 144;allocated any way you prefer,
		 as long as they're aligned enough for the architecture, and
		 they're freed appropriately (such as using av_free for buffers
		 allocated with av_malloc) */
		video_outbuf_size = 200000;
		video_outbuf = av_malloc(video_outbuf_size);
	}

	/* allocate the encoded raw picture */
	picture = alloc_picture(c->pix_fmt, c->width, c->height);
	if (!picture) {
		fprintf(stderr, "Could not allocate picture\n");
		exit(1);
	}

	/* if the output format is not YUV420P, then a temporary YUV420P
	 picture is needed too. It is then converted to the required
	 output format */
	tmp_picture = NULL;
	if (c->pix_fmt != PIX_FMT_YUV420P) {
		tmp_picture = alloc_picture(PIX_FMT_YUV420P, c->width, c->height);
		if (!tmp_picture) {
			fprintf(stderr, "Could not allocate temporary picture\n");
			exit(1);
		}
	}
}

/* prepare a dummy image */
static void fill_yuv_image(AVFrame *pict, int frame_index, int width,
		int height) {
	int x, y, i;

	i = frame_index;

	/* Y */
	for (y = 0; y < height; y++) {
		for (x = 0; x < width; x++) {
			pict->data[0][y * pict->linesize[0] + x] = x + y + i * 3;
		}
	}

	/* Cb and Cr */
	for (y = 0; y < height / 2; y++) {
		for (x = 0; x < width / 2; x++) {
			pict->data[1][y * pict->linesize[1] + x] = 128 + y + i * 2;
			pict->data[2][y * pict->linesize[2] + x] = 64 + x + i * 5;
		}
	}
}

static void write_video_frame(AVFormatContext *oc, AVStream *st) {
	int out_size, ret;
	AVCodecContext *c = st->codec;

	if (frame_count >= STREAM_NB_FRAMES) {
		/*
		 No more frame to compress. The codec has a latency of a few
		 frames if using B frames, so we get the last frames by
		 passing the same picture again
		 */
	} else {
		if (c->pix_fmt != PIX_FMT_YUV420P) {

			/* as we only generate a YUV420P picture, we must convert it
			 to the codec pixel format if needed */
			/*if (img_convert_ctx == NULL) {
			 img_convert_ctx = sws_getContext(c->width, c->height,
			 PIX_FMT_YUV420P,
			 c->width, c->height,
			 c->pix_fmt,
			 sws_flags, NULL, NULL, NULL);
			 if (img_convert_ctx == NULL) {
			 fprintf(stderr, "Cannot initialize the conversion context\n");
			 exit(1);
			 }
			 }
			 fill_yuv_image(tmp_picture, frame_count, c->width, c->height);
			 sws_scale(img_convert_ctx, tmp_picture->data, tmp_picture->linesize,
			 0, c->height, picture->data, picture->linesize);*/
			printf("Bugger\n");
			exit(-1);
		} else {
			fill_yuv_image(picture, frame_count, c->width, c->height);
		}
	}

	if (oc->oformat->flags & AVFMT_RAWPICTURE) {
		/* raw video case. The API will change slightly in the near
		 futur for that */
		AVPacket pkt;
		av_init_packet(&pkt);

		pkt.flags |= PKT_FLAG_KEY;
		pkt.stream_index = st->index;
		pkt.data = (uint8_t *) picture;
		pkt.size = sizeof(AVPicture);

		ret = av_interleaved_write_frame(oc, &pkt);
	} else {
		/* encode the image */
		out_size = avcodec_encode_video(c, video_outbuf, video_outbuf_size,
				picture);
		/* if zero size, it means the image was buffered */
		if (out_size > 0) {
			AVPacket pkt;
			av_init_packet(&pkt);

			if (c->coded_frame->pts != AV_NOPTS_VALUE)
				pkt.pts = av_rescale_q(c->coded_frame->pts, c->time_base,
						st->time_base);
			if (c->coded_frame->key_frame)
				pkt.flags |= PKT_FLAG_KEY;
			pkt.stream_index = st->index;
			pkt.data = video_outbuf;
			pkt.size = out_size;

			/* write the compressed frame in the media file */
			ret = av_interleaved_write_frame(oc, &pkt);
		} else {
			ret = 0;
		}
	}
	if (ret != 0) {
		fprintf(stderr, "Error while writing video frame\n");
		exit(1);
	}
	frame_count++;
}
int64_t lastPts;
static void writeVideoFrame(AVFormatContext* outputContext, AVStream* stream, AVFrame* inFrame)
{
	int out_size, ret;
	AVCodecContext *c = stream->codec;

	picture = inFrame;

	if (outputContext->oformat->flags & AVFMT_RAWPICTURE) {
		/* raw video case. The API will change slightly in the near
		 futur for that */
		AVPacket pkt;
		av_init_packet(&pkt);

		pkt.flags |= PKT_FLAG_KEY;
		pkt.stream_index = stream->index;
		pkt.data = (uint8_t *) picture;
		pkt.size = sizeof(AVPicture);

		ret = av_interleaved_write_frame(outputContext, &pkt);
	} else {
		/* encode the image */
		out_size = avcodec_encode_video(c, video_outbuf, video_outbuf_size,
				picture);
		/* if zero size, it means the image was buffered */
		if (out_size > 0) {
			AVPacket pkt;
			av_init_packet(&pkt);

			if (c->coded_frame->pts != AV_NOPTS_VALUE)
				pkt.pts = av_rescale_q(c->coded_frame->pts, c->time_base,
						stream->time_base);
			if (c->coded_frame->key_frame)
				pkt.flags |= PKT_FLAG_KEY;
			pkt.stream_index = stream->index;
			pkt.data = video_outbuf;
			pkt.size = out_size;
			pkt.pts = inFrame->pts;

			/* write the compressed frame in the media file */
			if(lastPts && pkt.pts != lastPts)
				ret = av_interleaved_write_frame(outputContext, &pkt);
			printf("%i\n", pkt.pts);
		} else {
			ret = 0;
		}
	}
	if (ret != 0) {
		fprintf(stderr, "Error while writing video frame\n");
		exit(1);
	}
	frame_count++;
}

static void closeVideoOutput(AVFormatContext* outputContext, AVStream* stream)
{
	avcodec_close(stream->codec);
	av_free(picture->data[0]);
	av_free(picture);
	if (tmp_picture)
	{
		av_free(tmp_picture->data[0]);
		av_free(tmp_picture);
	}
	av_free(video_outbuf);
}

/**************************************************************/
/* media file output */

int main(int argc, char **argv)
{
	//const char* filename = "udp://localhost:1234";
	const char* outFilename = "out.flv";
	const char* inFilename = "vid.3gp";
	av_register_all();
	AVOutputFormat* outputFormat = av_guess_format("flv", NULL, NULL);

	AVFormatContext* outputContext = avformat_alloc_context();
	outputContext->oformat = outputFormat;
	snprintf(outputContext->filename, sizeof(outputContext->filename), "%s", outFilename);

	AVFormatContext* inputContext;
	av_open_input_file(&inputContext, inFilename, NULL, 0, NULL);
	av_find_stream_info(inputContext);

	int videoStreamNB;
	for(videoStreamNB = 0; videoStreamNB < inputContext->nb_streams; videoStreamNB++)
		if(inputContext->streams[videoStreamNB]->codec->codec_type == CODEC_TYPE_VIDEO)
			break;

	AVCodecContext* inputCodecContext = inputContext->streams[videoStreamNB]->codec;
	AVCodec* inputCodec = avcodec_find_decoder(inputCodecContext->codec_id);
	avcodec_open(inputCodecContext, inputCodec);

	AVStream* videoOutStream = addVideoOutStream(outputContext, inputCodecContext, CODEC_ID_H264);
	//AVStream* audioOutStream = add_audio_stream(outputContext, CODEC_ID_AAC);
	AVStream* audioOutStream = NULL;

	av_set_parameters(outputContext, NULL);

	open_video(outputContext, videoOutStream);
	//open_audio(outputContext, audioOutStream);

	url_fopen(&outputContext->pb, outFilename, URL_WRONLY);

	av_write_header(outputContext);

	double audio_pts, video_pts;
	/*for (;;)
	{
		// Compute current audio and video time
		if (audioOutStream)
			audio_pts = (double) audioOutStream->pts.val * audioOutStream->time_base.num
					/ audioOutStream->time_base.den;
		else
			audio_pts = 0.0;

		if (videoOutStream)
			video_pts = (double) videoOutStream->pts.val * videoOutStream->time_base.num
					/ videoOutStream->time_base.den;
		else
			video_pts = 0.0;

		if ((!audioOutStream || audio_pts >= STREAM_DURATION) && (!videoOutStream
				|| video_pts >= STREAM_DURATION))
			break;

		// write interleaved audio and video frames
		if (!videoOutStream || (videoOutStream && audioOutStream && audio_pts < video_pts)) {
			write_audio_frame(outputContext, audioOutStream);
		} else {
			write_video_frame(outputContext, videoOutStream);
		}
	}*/

	AVFrame* videoInFrame = avcodec_alloc_frame();
	AVPacket packet;
	int videoFrameFinished;
	while(av_read_frame(inputContext, &packet) >= 0)
	{
		if(packet.stream_index == videoStreamNB)
		{
			avcodec_decode_video2(inputCodecContext, videoInFrame, &videoFrameFinished, &packet);
			if(videoFrameFinished)
			{
				writeVideoFrame(outputContext, videoOutStream, videoInFrame);
			}
		}
		else
		{
			// TODO Handle audio here
		}
		av_free_packet(&packet);
	}

	av_write_trailer(outputContext);


	closeVideoOutput(outputContext, videoOutStream);
	//closeAudioOutput(outputContext, audioOutStream);

	int i;
	for(i = 0; i < outputContext->nb_streams; i++)
	{
		av_freep(&outputContext->streams[i]->codec);
		av_freep(&outputContext->streams[i]);
	}

	url_fclose(outputContext->pb);
	av_free(videoInFrame);
	avcodec_close(inputCodecContext);
	av_close_input_file(inputContext);

	av_free(outputContext);

	return 0;
}
